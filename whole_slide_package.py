# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'helloworld_v3.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import glob

import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
#my packages....................................
import os.path
from PyQt5.QtWidgets import QFileDialog,QMessageBox,QLabel
from loader import LoadingScreen
from multi import *
from stich import *
import concurrent.futures
from color_calibration import *
from tile import *
#................................................

class Ui_MainWindow(object):
    def setupUi(self, SMainWindow):
        #my code ...........................................
        self.main_window = MainWindow
        #...................................................
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1014, 748)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 0, 991, 701))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 30, 971, 31))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.reg_in_text = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.reg_in_text.setAlignment(QtCore.Qt.AlignCenter)
        self.reg_in_text.setObjectName("reg_in_text")
        self.horizontalLayout_5.addWidget(self.reg_in_text)
        self.reg_in_but = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.reg_in_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.reg_in_but.setObjectName("reg_in_but")
        self.horizontalLayout_5.addWidget(self.reg_in_but)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 60, 971, 33))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.reg_out_text = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.reg_out_text.setAlignment(QtCore.Qt.AlignCenter)
        self.reg_out_text.setObjectName("reg_out_text")
        self.horizontalLayout_6.addWidget(self.reg_out_text)
        self.reg_out_but = QtWidgets.QPushButton(self.verticalLayoutWidget_2)
        self.reg_out_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.reg_out_but.setObjectName("reg_out_but")
        self.horizontalLayout_6.addWidget(self.reg_out_but)
        self.verticalLayout_2.addLayout(self.horizontalLayout_6)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.tab)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(-10, 110, 981, 491))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.reg_line1_label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.reg_line1_label.setMaximumSize(QtCore.QSize(100, 16777215))
        self.reg_line1_label.setAutoFillBackground(False)
        self.reg_line1_label.setStyleSheet("background:red;")
        self.reg_line1_label.setAlignment(QtCore.Qt.AlignCenter)
        self.reg_line1_label.setObjectName("reg_line1_label")
        self.horizontalLayout_11.addWidget(self.reg_line1_label)
        self.reg_line2_label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.reg_line2_label.setMaximumSize(QtCore.QSize(100, 16777215))
        self.reg_line2_label.setAutoFillBackground(False)
        self.reg_line2_label.setStyleSheet("background:green;")
        self.reg_line2_label.setAlignment(QtCore.Qt.AlignCenter)
        self.reg_line2_label.setObjectName("reg_line2_label")
        self.horizontalLayout_11.addWidget(self.reg_line2_label)
        self.reg_line3_label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.reg_line3_label.setMaximumSize(QtCore.QSize(100, 16777215))
        self.reg_line3_label.setAutoFillBackground(False)
        self.reg_line3_label.setStyleSheet("background:blue;")
        self.reg_line3_label.setAlignment(QtCore.Qt.AlignCenter)
        self.reg_line3_label.setObjectName("reg_line3_label")
        self.horizontalLayout_11.addWidget(self.reg_line3_label)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_7 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_7.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_7.setObjectName("label_7")
        self.verticalLayout_4.addWidget(self.label_7)
        self.reg_log = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.reg_log.setAutoFillBackground(False)
        self.reg_log.setStyleSheet("background:#e5f9ff;")
        self.reg_log.setText("")
        self.reg_log.setObjectName("reg_log")
        self.verticalLayout_4.addWidget(self.reg_log)
        self.verticalLayout_3.addLayout(self.verticalLayout_4)
        self.horizontalLayout_11.addLayout(self.verticalLayout_3)
        self.horizontalLayout_10.addLayout(self.horizontalLayout_11)
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.tab)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(0, 0, 971, 29))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_5)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.reg_back_text = QtWidgets.QLabel(self.verticalLayoutWidget_5)
        self.reg_back_text.setAlignment(QtCore.Qt.AlignCenter)
        self.reg_back_text.setObjectName("reg_back_text")
        self.horizontalLayout_14.addWidget(self.reg_back_text)
        self.reg_back_but = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.reg_back_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.reg_back_but.setObjectName("reg_back_but")
        self.horizontalLayout_14.addWidget(self.reg_back_but)
        self.verticalLayout_7.addLayout(self.horizontalLayout_14)
        self.reg_exec_but = QtWidgets.QPushButton(self.tab)
        self.reg_exec_but.setGeometry(QtCore.QRect(420, 620, 151, 31))
        self.reg_exec_but.setAutoFillBackground(False)
        self.reg_exec_but.setObjectName("reg_exec_but")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.verticalLayoutWidget_6 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_6.setGeometry(QtCore.QRect(10, 0, 971, 29))
        self.verticalLayoutWidget_6.setObjectName("verticalLayoutWidget_6")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_6)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.calib_regmat_text = QtWidgets.QLabel(self.verticalLayoutWidget_6)
        self.calib_regmat_text.setAlignment(QtCore.Qt.AlignCenter)
        self.calib_regmat_text.setObjectName("calib_regmat_text")
        self.horizontalLayout_15.addWidget(self.calib_regmat_text)
        self.calib_regmat_but = QtWidgets.QPushButton(self.verticalLayoutWidget_6)
        self.calib_regmat_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.calib_regmat_but.setObjectName("calib_regmat_but")
        self.horizontalLayout_15.addWidget(self.calib_regmat_but)
        self.verticalLayout_8.addLayout(self.horizontalLayout_15)
        self.verticalLayoutWidget_7 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_7.setGeometry(QtCore.QRect(10, 30, 971, 29))
        self.verticalLayoutWidget_7.setObjectName("verticalLayoutWidget_7")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_7)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.calib_ref_text = QtWidgets.QLabel(self.verticalLayoutWidget_7)
        self.calib_ref_text.setAlignment(QtCore.Qt.AlignCenter)
        self.calib_ref_text.setObjectName("calib_ref_text")
        self.horizontalLayout_16.addWidget(self.calib_ref_text)
        self.calib_ref_but = QtWidgets.QPushButton(self.verticalLayoutWidget_7)
        self.calib_ref_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.calib_ref_but.setObjectName("calib_ref_but")
        self.horizontalLayout_16.addWidget(self.calib_ref_but)
        self.verticalLayout_9.addLayout(self.horizontalLayout_16)
        self.verticalLayoutWidget_8 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_8.setGeometry(QtCore.QRect(10, 60, 971, 29))
        self.verticalLayoutWidget_8.setObjectName("verticalLayoutWidget_8")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_8)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.calib_wsi_text = QtWidgets.QLabel(self.verticalLayoutWidget_8)
        self.calib_wsi_text.setAlignment(QtCore.Qt.AlignCenter)
        self.calib_wsi_text.setObjectName("calib_wsi_text")
        self.horizontalLayout_17.addWidget(self.calib_wsi_text)
        self.calib_wsi_but = QtWidgets.QPushButton(self.verticalLayoutWidget_8)
        self.calib_wsi_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.calib_wsi_but.setObjectName("calib_wsi_but")
        self.horizontalLayout_17.addWidget(self.calib_wsi_but)
        self.verticalLayout_10.addLayout(self.horizontalLayout_17)
        self.verticalLayoutWidget_9 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_9.setGeometry(QtCore.QRect(10, 90, 971, 29))
        self.verticalLayoutWidget_9.setObjectName("verticalLayoutWidget_9")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_9)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.calib_back_text = QtWidgets.QLabel(self.verticalLayoutWidget_9)
        self.calib_back_text.setAlignment(QtCore.Qt.AlignCenter)
        self.calib_back_text.setObjectName("calib_back_text")
        self.horizontalLayout_18.addWidget(self.calib_back_text)
        self.calib_back_but = QtWidgets.QPushButton(self.verticalLayoutWidget_9)
        self.calib_back_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.calib_back_but.setObjectName("calib_back_but")
        self.horizontalLayout_18.addWidget(self.calib_back_but)
        self.verticalLayout_11.addLayout(self.horizontalLayout_18)
        self.verticalLayoutWidget_10 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_10.setGeometry(QtCore.QRect(10, 120, 971, 29))
        self.verticalLayoutWidget_10.setObjectName("verticalLayoutWidget_10")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_10)
        self.verticalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.calib_out_text = QtWidgets.QLabel(self.verticalLayoutWidget_10)
        self.calib_out_text.setAlignment(QtCore.Qt.AlignCenter)
        self.calib_out_text.setObjectName("calib_out_text")
        self.horizontalLayout_20.addWidget(self.calib_out_text)
        self.calib_out_but = QtWidgets.QPushButton(self.verticalLayoutWidget_10)
        self.calib_out_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.calib_out_but.setObjectName("calib_out_but")
        self.horizontalLayout_20.addWidget(self.calib_out_but)
        self.verticalLayout_13.addLayout(self.horizontalLayout_20)
        self.calib_real_img = QtWidgets.QLabel(self.tab_2)
        self.calib_real_img.setGeometry(QtCore.QRect(10, 180, 100, 441))
        self.calib_real_img.setMaximumSize(QtCore.QSize(100, 16777215))
        self.calib_real_img.setAutoFillBackground(False)
        self.calib_real_img.setStyleSheet("background:#dcc5ed;")
        self.calib_real_img.setText("")
        self.calib_real_img.setAlignment(QtCore.Qt.AlignCenter)
        self.calib_real_img.setObjectName("calib_real_img")
        self.label = QtWidgets.QLabel(self.tab_2)
        self.label.setGeometry(QtCore.QRect(10, 160, 101, 17))
        self.label.setObjectName("label")
        self.calib_before_img = QtWidgets.QLabel(self.tab_2)
        self.calib_before_img.setGeometry(QtCore.QRect(120, 180, 100, 441))
        self.calib_before_img.setMaximumSize(QtCore.QSize(100, 16777215))
        self.calib_before_img.setAutoFillBackground(False)
        self.calib_before_img.setStyleSheet("background:#dcc5ed;")
        self.calib_before_img.setText("")
        self.calib_before_img.setAlignment(QtCore.Qt.AlignCenter)
        self.calib_before_img.setObjectName("calib_before_img")
        self.label_2 = QtWidgets.QLabel(self.tab_2)
        self.label_2.setGeometry(QtCore.QRect(120, 160, 101, 17))
        self.label_2.setObjectName("label_2")
        self.calib_after_img = QtWidgets.QLabel(self.tab_2)
        self.calib_after_img.setGeometry(QtCore.QRect(230, 180, 100, 441))
        self.calib_after_img.setMaximumSize(QtCore.QSize(100, 16777215))
        self.calib_after_img.setAutoFillBackground(False)
        self.calib_after_img.setStyleSheet("background:#dcc5ed;")
        self.calib_after_img.setText("")
        self.calib_after_img.setAlignment(QtCore.Qt.AlignCenter)
        self.calib_after_img.setObjectName("calib_after_img")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(230, 160, 101, 17))
        self.label_3.setObjectName("label_3")
        self.layoutWidget = QtWidgets.QWidget(self.tab_2)
        self.layoutWidget.setGeometry(QtCore.QRect(339, 183, 641, 441))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_8 = QtWidgets.QLabel(self.layoutWidget)
        self.label_8.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_8.setObjectName("label_8")
        self.verticalLayout_6.addWidget(self.label_8)
        # i replaced this part ...............................
        self.calib_log = QtWidgets.QTextEdit(self.layoutWidget)
        self.calib_log.setAutoFillBackground(False)
        self.calib_log.setStyleSheet("background:#e5f9ff;")
        self.calib_log.setText("")
        self.calib_log.setObjectName("calib_log")
        self.calib_log.setReadOnly(True)
        #......................................................
        self.verticalLayout_6.addWidget(self.calib_log)
        self.verticalLayout_5.addLayout(self.verticalLayout_6)
        self.calib_exec_but = QtWidgets.QPushButton(self.tab_2)
        self.calib_exec_but.setGeometry(QtCore.QRect(400, 630, 151, 31))
        self.calib_exec_but.setAutoFillBackground(False)
        self.calib_exec_but.setObjectName("calib_exec_but")
        self.verticalLayoutWidget_18 = QtWidgets.QWidget(self.tab_2)
        self.verticalLayoutWidget_18.setGeometry(QtCore.QRect(740, 150, 241, 31))
        self.verticalLayoutWidget_18.setObjectName("verticalLayoutWidget_18")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_18)
        self.verticalLayout_24.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.label_10 = QtWidgets.QLabel(self.verticalLayoutWidget_18)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_29.addWidget(self.label_10)
        self.calib_threadnum = QtWidgets.QTextEdit(self.verticalLayoutWidget_18)
        self.calib_threadnum.setObjectName("calib_threadnum")
        self.horizontalLayout_29.addWidget(self.calib_threadnum)
        self.verticalLayout_24.addLayout(self.horizontalLayout_29)
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.verticalLayoutWidget_11 = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget_11.setGeometry(QtCore.QRect(10, 0, 971, 29))
        self.verticalLayoutWidget_11.setObjectName("verticalLayoutWidget_11")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_11)
        self.verticalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.stich_raw_text = QtWidgets.QLabel(self.verticalLayoutWidget_11)
        self.stich_raw_text.setAlignment(QtCore.Qt.AlignCenter)
        self.stich_raw_text.setObjectName("stich_raw_text")
        self.horizontalLayout_21.addWidget(self.stich_raw_text)
        self.stich_raw_but = QtWidgets.QPushButton(self.verticalLayoutWidget_11)
        self.stich_raw_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.stich_raw_but.setObjectName("stich_raw_but")
        self.horizontalLayout_21.addWidget(self.stich_raw_but)
        self.verticalLayout_14.addLayout(self.horizontalLayout_21)
        self.verticalLayoutWidget_12 = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget_12.setGeometry(QtCore.QRect(10, 30, 971, 29))
        self.verticalLayoutWidget_12.setObjectName("verticalLayoutWidget_12")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_12)
        self.verticalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.stich_regmat_text = QtWidgets.QLabel(self.verticalLayoutWidget_12)
        self.stich_regmat_text.setAlignment(QtCore.Qt.AlignCenter)
        self.stich_regmat_text.setObjectName("stich_regmat_text")
        self.horizontalLayout_22.addWidget(self.stich_regmat_text)
        self.stich_regmat_but = QtWidgets.QPushButton(self.verticalLayoutWidget_12)
        self.stich_regmat_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.stich_regmat_but.setObjectName("stich_regmat_but")
        self.horizontalLayout_22.addWidget(self.stich_regmat_but)
        self.verticalLayout_15.addLayout(self.horizontalLayout_22)
        self.verticalLayoutWidget_13 = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget_13.setGeometry(QtCore.QRect(10, 60, 971, 29))
        self.verticalLayoutWidget_13.setObjectName("verticalLayoutWidget_13")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_13)
        self.verticalLayout_16.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.stich_back_text = QtWidgets.QLabel(self.verticalLayoutWidget_13)
        self.stich_back_text.setAlignment(QtCore.Qt.AlignCenter)
        self.stich_back_text.setObjectName("stich_back_text")
        self.horizontalLayout_23.addWidget(self.stich_back_text)
        self.stich_back_but = QtWidgets.QPushButton(self.verticalLayoutWidget_13)
        self.stich_back_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.stich_back_but.setObjectName("stich_back_but")
        self.horizontalLayout_23.addWidget(self.stich_back_but)
        self.verticalLayout_16.addLayout(self.horizontalLayout_23)
        self.verticalLayoutWidget_14 = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget_14.setGeometry(QtCore.QRect(10, 90, 331, 29))
        self.verticalLayoutWidget_14.setObjectName("verticalLayoutWidget_14")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_14)
        self.verticalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget_14)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_25.addWidget(self.label_4)
        self.stich_calibbox = QtWidgets.QCheckBox(self.verticalLayoutWidget_14)
        self.stich_calibbox.setText("")
        self.stich_calibbox.setObjectName("stich_calibbox")
        self.horizontalLayout_25.addWidget(self.stich_calibbox)
        self.verticalLayout_18.addLayout(self.horizontalLayout_25)
        self.verticalLayoutWidget_15 = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget_15.setGeometry(QtCore.QRect(10, 120, 971, 29))
        self.verticalLayoutWidget_15.setObjectName("verticalLayoutWidget_15")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_15)
        self.verticalLayout_19.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.stich_calibmat_text = QtWidgets.QLabel(self.verticalLayoutWidget_15)
        self.stich_calibmat_text.setAlignment(QtCore.Qt.AlignCenter)
        self.stich_calibmat_text.setObjectName("stich_calibmat_text")
        self.horizontalLayout_26.addWidget(self.stich_calibmat_text)
        self.stich_calibmat_but = QtWidgets.QPushButton(self.verticalLayoutWidget_15)
        self.stich_calibmat_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.stich_calibmat_but.setObjectName("stich_calibmat_but")
        self.horizontalLayout_26.addWidget(self.stich_calibmat_but)
        self.verticalLayout_19.addLayout(self.horizontalLayout_26)
        self.verticalLayoutWidget_16 = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget_16.setGeometry(QtCore.QRect(10, 150, 971, 29))
        self.verticalLayoutWidget_16.setObjectName("verticalLayoutWidget_16")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_16)
        self.verticalLayout_20.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.stich_out_text = QtWidgets.QLabel(self.verticalLayoutWidget_16)
        self.stich_out_text.setAlignment(QtCore.Qt.AlignCenter)
        self.stich_out_text.setObjectName("stich_out_text")
        self.horizontalLayout_27.addWidget(self.stich_out_text)
        self.stich_out_but = QtWidgets.QPushButton(self.verticalLayoutWidget_16)
        self.stich_out_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.stich_out_but.setObjectName("stich_out_but")
        self.horizontalLayout_27.addWidget(self.stich_out_but)
        self.verticalLayout_20.addLayout(self.horizontalLayout_27)
        self.verticalLayoutWidget_17 = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget_17.setGeometry(QtCore.QRect(740, 90, 241, 31))
        self.verticalLayoutWidget_17.setObjectName("verticalLayoutWidget_17")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_17)
        self.verticalLayout_21.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.label_5 = QtWidgets.QLabel(self.verticalLayoutWidget_17)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_28.addWidget(self.label_5)
        self.stich_threadnum = QtWidgets.QTextEdit(self.verticalLayoutWidget_17)
        self.stich_threadnum.setObjectName("stich_threadnum")
        self.horizontalLayout_28.addWidget(self.stich_threadnum)
        self.verticalLayout_21.addLayout(self.horizontalLayout_28)
        self.layoutWidget_2 = QtWidgets.QWidget(self.tab_3)
        self.layoutWidget_2.setGeometry(QtCore.QRect(340, 180, 641, 441))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.layoutWidget_2)
        self.verticalLayout_22.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout()
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.label_9 = QtWidgets.QLabel(self.layoutWidget_2)
        self.label_9.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_9.setObjectName("label_9")
        self.verticalLayout_23.addWidget(self.label_9)
        #.........................................................
        self.stich_log = QtWidgets.QTextEdit(self.layoutWidget_2)
        self.stich_log.setAutoFillBackground(False)
        self.stich_log.setStyleSheet("background:#e5f9ff;")
        self.stich_log.setText("")
        self.stich_log.setObjectName("stich_log")
        self.stich_log.setReadOnly(True)
        #.........................................................
        self.verticalLayout_23.addWidget(self.stich_log)
        self.verticalLayout_22.addLayout(self.verticalLayout_23)
        self.stich_img = QtWidgets.QLabel(self.tab_3)
        self.stich_img.setGeometry(QtCore.QRect(26, 186, 301, 431))
        self.stich_img.setStyleSheet("background:#d9ebd5;")
        self.stich_img.setText("")
        self.stich_img.setObjectName("stich_img")
        self.stich_exec_but = QtWidgets.QPushButton(self.tab_3)
        self.stich_exec_but.setGeometry(QtCore.QRect(410, 630, 151, 31))
        self.stich_exec_but.setAutoFillBackground(False)
        self.stich_exec_but.setObjectName("stich_exec_but")
        self.verticalLayoutWidget_30 = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget_30.setGeometry(QtCore.QRect(410, 90, 221, 29))
        self.verticalLayoutWidget_30.setObjectName("verticalLayoutWidget_30")
        self.verticalLayout_42 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_30)
        self.verticalLayout_42.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_42.setObjectName("verticalLayout_42")
        self.horizontalLayout_34 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_34.setObjectName("horizontalLayout_34")
        self.label_21 = QtWidgets.QLabel(self.verticalLayoutWidget_30)
        self.label_21.setObjectName("label_21")
        self.horizontalLayout_34.addWidget(self.label_21)
        self.stich_whiten_box= QtWidgets.QCheckBox(self.verticalLayoutWidget_30)
        self.stich_whiten_box.setText("")
        self.stich_whiten_box.setObjectName("stich_whiten_box")
        self.horizontalLayout_34.addWidget(self.stich_whiten_box)
        self.verticalLayout_42.addLayout(self.horizontalLayout_34)
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.verticalLayoutWidget_19 = QtWidgets.QWidget(self.tab_4)
        self.verticalLayoutWidget_19.setGeometry(QtCore.QRect(10, 0, 971, 29))
        self.verticalLayoutWidget_19.setObjectName("verticalLayoutWidget_19")
        self.verticalLayout_25 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_19)
        self.verticalLayout_25.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.horizontalLayout_30 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        self.tile_source_text = QtWidgets.QLabel(self.verticalLayoutWidget_19)
        self.tile_source_text.setAlignment(QtCore.Qt.AlignCenter)
        self.tile_source_text.setObjectName("tile_source_text")
        self.horizontalLayout_30.addWidget(self.tile_source_text)
        self.tile_source_but = QtWidgets.QPushButton(self.verticalLayoutWidget_19)
        self.tile_source_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.tile_source_but.setObjectName("tile_source_but")
        self.horizontalLayout_30.addWidget(self.tile_source_but)
        self.verticalLayout_25.addLayout(self.horizontalLayout_30)
        self.verticalLayoutWidget_20 = QtWidgets.QWidget(self.tab_4)
        self.verticalLayoutWidget_20.setGeometry(QtCore.QRect(10, 30, 971, 29))
        self.verticalLayoutWidget_20.setObjectName("verticalLayoutWidget_20")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_20)
        self.verticalLayout_26.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.tile_out_text = QtWidgets.QLabel(self.verticalLayoutWidget_20)
        self.tile_out_text.setAlignment(QtCore.Qt.AlignCenter)
        self.tile_out_text.setObjectName("tile_out_text")
        self.horizontalLayout_31.addWidget(self.tile_out_text)
        self.tile_out_but = QtWidgets.QPushButton(self.verticalLayoutWidget_20)
        self.tile_out_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.tile_out_but.setObjectName("tile_out_but")
        self.horizontalLayout_31.addWidget(self.tile_out_but)
        self.verticalLayout_26.addLayout(self.horizontalLayout_31)
        self.layoutWidget_3 = QtWidgets.QWidget(self.tab_4)
        self.layoutWidget_3.setGeometry(QtCore.QRect(10, 70, 971, 541))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout(self.layoutWidget_3)
        self.verticalLayout_27.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout()
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.label_11 = QtWidgets.QLabel(self.layoutWidget_3)
        self.label_11.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_11.setObjectName("label_11")
        self.verticalLayout_28.addWidget(self.label_11)
        #...........................................................
        self.tile_log = QtWidgets.QTextEdit(self.layoutWidget_3)
        self.tile_log.setAutoFillBackground(False)
        self.tile_log.setStyleSheet("background:#e5f9ff;")
        self.tile_log.setText("")
        self.tile_log.setObjectName("tile_log")
        self.tile_log.setReadOnly(True)
        #.............................................................
        self.verticalLayout_28.addWidget(self.tile_log)
        self.verticalLayout_27.addLayout(self.verticalLayout_28)
        self.tile_exec_but = QtWidgets.QPushButton(self.tab_4)
        self.tile_exec_but.setGeometry(QtCore.QRect(430, 620, 151, 31))
        self.tile_exec_but.setAutoFillBackground(False)
        self.tile_exec_but.setObjectName("tile_exec_but")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.verticalLayoutWidget_21 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_21.setGeometry(QtCore.QRect(10, 0, 971, 29))
        self.verticalLayoutWidget_21.setObjectName("verticalLayoutWidget_21")
        self.verticalLayout_29 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_21)
        self.verticalLayout_29.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_29.setObjectName("verticalLayout_29")
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.upl_dzi_text = QtWidgets.QLabel(self.verticalLayoutWidget_21)
        self.upl_dzi_text.setAlignment(QtCore.Qt.AlignCenter)
        self.upl_dzi_text.setObjectName("upl_dzi_text")
        self.horizontalLayout_32.addWidget(self.upl_dzi_text)
        self.upl_dzi_but = QtWidgets.QPushButton(self.verticalLayoutWidget_21)
        self.upl_dzi_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.upl_dzi_but.setObjectName("upl_dzi_but")
        self.horizontalLayout_32.addWidget(self.upl_dzi_but)
        self.verticalLayout_29.addLayout(self.horizontalLayout_32)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(10, 30, 101, 71))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_30.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.label_6 = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_30.addWidget(self.label_6)
        self.up_sname = QtWidgets.QTextEdit(self.verticalLayoutWidget_3)
        self.up_sname.setObjectName("up_sname")
        self.verticalLayout_30.addWidget(self.up_sname)
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(120, 30, 72, 71))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_31 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_31.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        self.label_12 = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_31.addWidget(self.label_12)
        self.up_labname = QtWidgets.QTextEdit(self.verticalLayoutWidget_4)
        self.up_labname.setObjectName("up_labname")
        self.verticalLayout_31.addWidget(self.up_labname)
        self.verticalLayoutWidget_22 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_22.setGeometry(QtCore.QRect(200, 30, 191, 71))
        self.verticalLayoutWidget_22.setObjectName("verticalLayoutWidget_22")
        self.verticalLayout_32 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_22)
        self.verticalLayout_32.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_32.setObjectName("verticalLayout_32")
        self.label_13 = QtWidgets.QLabel(self.verticalLayoutWidget_22)
        self.label_13.setObjectName("label_13")
        self.verticalLayout_32.addWidget(self.label_13)
        self.up_dzoom = QtWidgets.QTextEdit(self.verticalLayoutWidget_22)
        self.up_dzoom.setObjectName("up_dzoom")
        self.verticalLayout_32.addWidget(self.up_dzoom)
        self.verticalLayoutWidget_23 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_23.setGeometry(QtCore.QRect(470, 30, 81, 71))
        self.verticalLayoutWidget_23.setObjectName("verticalLayoutWidget_23")
        self.verticalLayout_33 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_23)
        self.verticalLayout_33.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_33.setObjectName("verticalLayout_33")
        self.label_14 = QtWidgets.QLabel(self.verticalLayoutWidget_23)
        self.label_14.setObjectName("label_14")
        self.verticalLayout_33.addWidget(self.label_14)
        self.up_brightness = QtWidgets.QTextEdit(self.verticalLayoutWidget_23)
        self.up_brightness.setObjectName("up_brightness")
        self.verticalLayout_33.addWidget(self.up_brightness)
        self.verticalLayoutWidget_24 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_24.setGeometry(QtCore.QRect(550, 30, 72, 71))
        self.verticalLayoutWidget_24.setObjectName("verticalLayoutWidget_24")
        self.verticalLayout_34 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_24)
        self.verticalLayout_34.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_34.setObjectName("verticalLayout_34")
        self.label_15 = QtWidgets.QLabel(self.verticalLayoutWidget_24)
        self.label_15.setObjectName("label_15")
        self.verticalLayout_34.addWidget(self.label_15)
        self.up_contrast = QtWidgets.QTextEdit(self.verticalLayoutWidget_24)
        self.up_contrast.setObjectName("up_contrast")
        self.verticalLayout_34.addWidget(self.up_contrast)
        self.verticalLayoutWidget_25 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_25.setGeometry(QtCore.QRect(400, 30, 72, 71))
        self.verticalLayoutWidget_25.setObjectName("verticalLayoutWidget_25")
        self.verticalLayout_35 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_25)
        self.verticalLayout_35.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_35.setObjectName("verticalLayout_35")
        self.label_16 = QtWidgets.QLabel(self.verticalLayoutWidget_25)
        self.label_16.setObjectName("label_16")
        self.verticalLayout_35.addWidget(self.label_16)
        self.up_gamma = QtWidgets.QTextEdit(self.verticalLayoutWidget_25)
        self.up_gamma.setObjectName("up_gamma")
        self.verticalLayout_35.addWidget(self.up_gamma)
        self.verticalLayoutWidget_26 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_26.setGeometry(QtCore.QRect(630, 50, 335, 29))
        self.verticalLayoutWidget_26.setObjectName("verticalLayoutWidget_26")
        self.verticalLayout_36 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_26)
        self.verticalLayout_36.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_36.setObjectName("verticalLayout_36")
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        self.label_17 = QtWidgets.QLabel(self.verticalLayoutWidget_26)
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_33.addWidget(self.label_17)
        self.up_khavar_box = QtWidgets.QCheckBox(self.verticalLayoutWidget_26)
        self.up_khavar_box.setText("")
        self.up_khavar_box.setObjectName("up_khavar_box")
        self.horizontalLayout_33.addWidget(self.up_khavar_box)
        self.verticalLayout_36.addLayout(self.horizontalLayout_33)
        self.verticalLayoutWidget_27 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_27.setGeometry(QtCore.QRect(10, 100, 971, 29))
        self.verticalLayoutWidget_27.setObjectName("verticalLayoutWidget_27")
        self.verticalLayout_37 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_27)
        self.verticalLayout_37.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_37.setObjectName("verticalLayout_37")
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.up_icon_text = QtWidgets.QLabel(self.verticalLayoutWidget_27)
        self.up_icon_text.setAlignment(QtCore.Qt.AlignCenter)
        self.up_icon_text.setObjectName("up_icon_text")
        self.horizontalLayout_35.addWidget(self.up_icon_text)
        self.up_icon_but = QtWidgets.QPushButton(self.verticalLayoutWidget_27)
        self.up_icon_but.setMaximumSize(QtCore.QSize(100, 16777215))
        self.up_icon_but.setObjectName("up_icon_but")
        self.horizontalLayout_35.addWidget(self.up_icon_but)
        self.verticalLayout_37.addLayout(self.horizontalLayout_35)
        self.verticalLayoutWidget_28 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_28.setGeometry(QtCore.QRect(10, 130, 461, 181))
        self.verticalLayoutWidget_28.setObjectName("verticalLayoutWidget_28")
        self.verticalLayout_38 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_28)
        self.verticalLayout_38.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_38.setObjectName("verticalLayout_38")
        self.label_18 = QtWidgets.QLabel(self.verticalLayoutWidget_28)
        self.label_18.setObjectName("label_18")
        self.verticalLayout_38.addWidget(self.label_18)
        self.up_desc1 = QtWidgets.QTextEdit(self.verticalLayoutWidget_28)
        self.up_desc1.setObjectName("up_desc1")
        self.verticalLayout_38.addWidget(self.up_desc1)
        self.verticalLayoutWidget_29 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_29.setGeometry(QtCore.QRect(500, 130, 461, 181))
        self.verticalLayoutWidget_29.setObjectName("verticalLayoutWidget_29")
        self.verticalLayout_39 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_29)
        self.verticalLayout_39.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_39.setObjectName("verticalLayout_39")
        self.label_19 = QtWidgets.QLabel(self.verticalLayoutWidget_29)
        self.label_19.setObjectName("label_19")
        self.verticalLayout_39.addWidget(self.label_19)
        self.up_desc2 = QtWidgets.QTextEdit(self.verticalLayoutWidget_29)
        self.up_desc2.setObjectName("up_desc2")
        self.verticalLayout_39.addWidget(self.up_desc2)
        self.up_link_img = QtWidgets.QLabel(self.tab_5)
        self.up_link_img.setGeometry(QtCore.QRect(510, 430, 451, 20))
        self.up_link_img.setStyleSheet("background:#e5f9ff;")
        self.up_link_img.setObjectName("up_link_img")
        self.tile_exec_but_2 = QtWidgets.QPushButton(self.tab_5)
        self.tile_exec_but_2.setGeometry(QtCore.QRect(650, 490, 151, 31))
        self.tile_exec_but_2.setAutoFillBackground(False)
        self.tile_exec_but_2.setObjectName("tile_exec_but_2")
        self.layoutWidget_4 = QtWidgets.QWidget(self.tab_5)
        self.layoutWidget_4.setGeometry(QtCore.QRect(10, 310, 461, 291))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.verticalLayout_40 = QtWidgets.QVBoxLayout(self.layoutWidget_4)
        self.verticalLayout_40.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_40.setObjectName("verticalLayout_40")
        self.verticalLayout_41 = QtWidgets.QVBoxLayout()
        self.verticalLayout_41.setObjectName("verticalLayout_41")
        self.label_20 = QtWidgets.QLabel(self.layoutWidget_4)
        self.label_20.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_20.setObjectName("label_20")
        self.verticalLayout_41.addWidget(self.label_20)
        self.tile_log_2 = QtWidgets.QLabel(self.layoutWidget_4)
        self.tile_log_2.setAutoFillBackground(False)
        self.tile_log_2.setStyleSheet("background:#e5f9ff;")
        self.tile_log_2.setText("")
        self.tile_log_2.setObjectName("tile_log_2")
        self.verticalLayout_41.addWidget(self.tile_log_2)
        self.verticalLayout_40.addLayout(self.verticalLayout_41)
        self.tabWidget.addTab(self.tab_5, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1014, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        #my code.........................................................
        self.reg_log.setAlignment(QtCore.Qt.AlignLeft)
        self.reg_in_but.setDisabled(True)
        self.reg_out_but.setDisabled(True)
        self.reg_exec_but.setDisabled(True)
        self.reg_back_but.clicked.connect(self.reg_back_but_func)
        self.reg_in_but.clicked.connect(self.reg_in_but_func)
        self.reg_out_but.clicked.connect(self.reg_out_but_func)
        self.reg_exec_but.clicked.connect(self.reg_exec_but_func)
        self.loader = LoadingScreen()
        self.calib_regmat_but.clicked.connect(self.calib_regmax_handler)
        self.calib_ref_but.clicked.connect(self.calib_ref_handler)
        self.calib_wsi_but.clicked.connect(self.calib_wsi_handler)
        self.calib_back_but.clicked.connect(self.calib_back_handler)
        self.calib_out_but.clicked.connect(self.calib_out_handler)
        self.calib_exec_but.clicked.connect(self.calib_exec_handler)
        self.calib_ref_but.setDisabled(True)
        self.calib_wsi_but.setDisabled(True)
        self.calib_back_but.setDisabled(True)
        self.calib_out_but.setDisabled(True)
        self.calib_threadnum.setDisabled(True)
        self.calib_exec_but.setDisabled(True)

        self.stich_raw_but.clicked.connect(self.stich_lines_handler)
        self.stich_regmat_but.clicked.connect(self.stich_regmat_handler)
        self.stich_back_but.clicked.connect(self.stich_back_handler)
        self.stich_calibbox.toggled.connect(self.stich_calibbox_handler)
        self.stich_whiten_box.toggled.connect(self.stich_whiten_box_handler)
        self.stich_calibmat_but.clicked.connect(self.stich_calibmat_handler)
        self.stich_out_but.clicked.connect(self.stich_out_handler)
        self.stich_exec_but.clicked.connect(self.stich_exec_handler)
        self.stich_regmat_but.setDisabled(True)
        self.stich_back_but.setDisabled(True)
        self.stich_calibbox.setDisabled(True)
        self.stich_whiten_box.setDisabled(True)
        self.stich_threadnum.setDisabled(True)
        self.stich_calibmat_text.setDisabled(True)
        self.stich_calibmat_but.setDisabled(True)
        self.stich_out_but.setDisabled(True)
        self.stich_exec_but.setDisabled(True)
        self.stich_need_whiten = False
        self.stich_need_calib = False
        self.stich_color_calib_path = None

        self.tile_source_but.clicked.connect(self.tile_source_handler)
        self.tile_out_but.clicked.connect(self.tile_out_handler)
        self.tile_exec_but.clicked.connect(self.tile_exec_handler)
        self.tile_out_but.setDisabled(True)
        self.tile_exec_but.setDisabled(True)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.reg_in_text.setText(_translate("MainWindow", "specify the first line of template file:"))
        self.reg_in_but.setText(_translate("MainWindow", "browse"))
        self.reg_out_text.setText(_translate("MainWindow", "specify the output directory to save registration file:"))
        self.reg_out_but.setText(_translate("MainWindow", "browse"))
        self.reg_line1_label.setText(_translate("MainWindow", "line 1"))
        self.reg_line2_label.setText(_translate("MainWindow", "line 2"))
        self.reg_line3_label.setText(_translate("MainWindow", "line 3"))
        self.label_7.setText(_translate("MainWindow", "log:"))
        self.reg_back_text.setText(_translate("MainWindow", "specify the first line of background images:"))
        self.reg_back_but.setText(_translate("MainWindow", "browse"))
        self.reg_exec_but.setText(_translate("MainWindow", "execute"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "registeration"))
        self.calib_regmat_text.setText(_translate("MainWindow", "specify the registration_matrix path:"))
        self.calib_regmat_but.setText(_translate("MainWindow", "browse"))
        self.calib_ref_text.setText(_translate("MainWindow", "specify the reference image directory:"))
        self.calib_ref_but.setText(_translate("MainWindow", "browse"))
        self.calib_wsi_text.setText(_translate("MainWindow", "specify the whole slide image directory (contain bg folder 1 to 10 folder):"))
        self.calib_wsi_but.setText(_translate("MainWindow", "browse"))
        self.calib_back_text.setText(_translate("MainWindow", "specify the first line of background images:"))
        self.calib_back_but.setText(_translate("MainWindow", "browse"))
        self.calib_out_text.setText(_translate("MainWindow", "specify the output directory to save color calibration matrix:"))
        self.calib_out_but.setText(_translate("MainWindow", "browse"))
        self.label.setText(_translate("MainWindow", "real colors :"))
        self.label_2.setText(_translate("MainWindow", "before calib:"))
        self.label_3.setText(_translate("MainWindow", "after calib:"))
        self.label_8.setText(_translate("MainWindow", "log:"))
        self.calib_exec_but.setText(_translate("MainWindow", "execute"))
        self.label_10.setText(_translate("MainWindow", "number of threads:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "calibration"))
        self.stich_raw_text.setText(_translate("MainWindow", "specify the raw images path:"))
        self.stich_raw_but.setText(_translate("MainWindow", "browse"))
        self.stich_regmat_text.setText(_translate("MainWindow", "specify the registration_matrix path:"))
        self.stich_regmat_but.setText(_translate("MainWindow", "browse"))
        self.stich_back_text.setText(_translate("MainWindow", "specify the background path:"))
        self.stich_back_but.setText(_translate("MainWindow", "browse"))
        self.label_4.setText(_translate("MainWindow", "do you want to use color calibration matrix?"))
        self.stich_calibmat_text.setText(_translate("MainWindow", "specify the color calibration matrix path:"))
        self.stich_calibmat_but.setText(_translate("MainWindow", "browse"))
        self.stich_out_text.setText(_translate("MainWindow", "specify the output directory to save stiched image:"))
        self.stich_out_but.setText(_translate("MainWindow", "browse"))
        self.label_5.setText(_translate("MainWindow", "number of threads:"))
        self.label_9.setText(_translate("MainWindow", "log:"))
        self.stich_exec_but.setText(_translate("MainWindow", "execute"))
        self.label_21.setText(_translate("MainWindow", "whiten the background?"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "stich"))
        self.tile_source_text.setText(_translate("MainWindow", "specify the stiched_image path:"))
        self.tile_source_but.setText(_translate("MainWindow", "browse"))
        self.tile_out_text.setText(_translate("MainWindow", "specify the directory to save tiles:"))
        self.tile_out_but.setText(_translate("MainWindow", "browse"))
        self.label_11.setText(_translate("MainWindow", "log:"))
        self.tile_exec_but.setText(_translate("MainWindow", "execute"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "tile maker"))
        self.upl_dzi_text.setText(_translate("MainWindow", "specify dzi path:"))
        self.upl_dzi_but.setText(_translate("MainWindow", "browse"))
        self.label_6.setText(_translate("MainWindow", "sample name:"))
        self.label_12.setText(_translate("MainWindow", "lab name:"))
        self.label_13.setText(_translate("MainWindow", "digital zoom level:(100-200)"))
        self.label_14.setText(_translate("MainWindow", "brightness:"))
        self.label_15.setText(_translate("MainWindow", "contrast:"))
        self.label_16.setText(_translate("MainWindow", "gamma:"))
        self.label_17.setText(_translate("MainWindow", "do you want to use kahavar mianeh template?"))
        self.up_icon_text.setText(_translate("MainWindow", "specify the icon path for customer lab:"))
        self.up_icon_but.setText(_translate("MainWindow", "browse"))
        self.label_18.setText(_translate("MainWindow", "description 1 :"))
        self.label_19.setText(_translate("MainWindow", "description 2 :"))
        self.up_link_img.setText(_translate("MainWindow", "link of image:"))
        self.tile_exec_but_2.setText(_translate("MainWindow", "execute"))
        self.label_20.setText(_translate("MainWindow", "log:"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow", "upload"))
    #my codes start here:...........................................................................................
    def ex_listener(self, f):
        out_dir = f.result()
        self.main_window.setDisabled(False)
        self.reg_log.setText(self.reg_log.text() + "transformation matrix saved in " + out_dir + " ! \n")
        self.reg_log.setText(self.reg_log.text() + "process done!\n")
        self.loader.stopAnimation()

    def coef_listener(self, data):
        self.reg_coefs = data
        self.loader.stopAnimation()
        self.reg_log.setText(self.reg_log.text() + "background images loaded successfuly!\n")
        self.reg_back_text.setText(self.coef_path)
        self.main_window.setDisabled(False)
        self.reg_in_but.setDisabled(False)

    def template_listener(self, data):
        self.R, self.G, self.B = data
        self.main_window.setDisabled(False)
        self.reg_log.setText(self.reg_log.text() + "template images loaded successfuly!\n")
        self.reg_in_text.setText(self.template_line)
        self.reg_out_but.setDisabled(False)
        self.reg_in_text.setText(self.template_line)
        self.loader.stopAnimation()
        #................................................................

    def reg_back_but_func(self):
        self.openFileNamesDialog_back()

    def reg_in_but_func(self):
        self.openFileNamesDialog_in()

    def reg_out_but_func(self):
        self.openFileNamesDialog_out()

    def message(self,text):
        msg = QMessageBox()
        msg.setWindowTitle("error")
        msg.setText(text)
        x = msg.exec_()

    def openFileNamesDialog_back(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        self.coef_path, _ = QFileDialog.getOpenFileName(self.reg_in_but, "QFileDialog.getOpenFileName()", "",
                                                                "All Files (*);;Python Files (*.py)", options=options)
        if not(self.coef_path.split(".")[-1] == "tif"):
           self.message("you should select tif file!")
        else:
            try:
                self.loader.startAnimation()
                self.reg_log.setText(self.reg_log.text() + "laoding the background images...\n")
                self.thread_coef = QtCore.QThread()
                self.worker_coef = coef_worker(self.coef_path)
                self.worker_coef.moveToThread(self.thread_coef)
                self.thread_coef.started.connect(self.worker_coef.run)
                self.worker_coef.finished.connect(self.thread_coef.quit)
                self.worker_coef.finished.connect(self.worker_coef.deleteLater)
                self.thread_coef.finished.connect(self.thread_coef.deleteLater)
                self.worker_coef.finished2.connect(self.coef_listener)
                self.thread_coef.start()
                self.main_window.setDisabled(True)

            except:
                self.message("background images is not image file!")
                self.reg_log.setText(self.reg_log.text() + "error in reading the background images!\n")

    def openFileNamesDialog_in(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        self.template_line, _ = QFileDialog.getOpenFileName(self.reg_in_but, "QFileDialog.getOpenFileName()", "",
                                                    "All Files (*);;Python Files (*.py)", options=options)
        if not(self.template_line.split(".")[-1] == "tif"):
           self.message("you should select tif file!")
        else:
            self.reg_log.setText(self.reg_log.text() + "laoding the template images...\n")
            try:
                self.thread_temp = QtCore.QThread()
                self.worker_temp = template_worker(self.template_line,self.reg_coefs,self)
                self.worker_temp.moveToThread(self.thread_temp)
                self.thread_temp.started.connect(self.worker_temp.run)
                self.worker_temp.finished.connect(self.thread_temp.quit)
                self.worker_temp.finished.connect(self.worker_temp.deleteLater)
                self.thread_temp.finished.connect(self.thread_temp.deleteLater)
                self.worker_temp.finished2.connect(self.template_listener)
                self.thread_temp.start()
                self.loader.startAnimation()
                self.reg_log.setText(self.reg_log.text() + "template images writed in temp directory!\n")
                self.main_window.setDisabled(True)
            except:
                self.message("background images is not image file!")
                self.reg_log.setText(self.reg_log.text() + "error in reading the background images!\n")

    def openFileNamesDialog_out(self):
        try:
            homography_out_dir = str(QFileDialog.getExistingDirectory(self.reg_out_but, "Select Directory"))+"/"
            if os.path.exists(homography_out_dir + "transformation_matrix"):
                self.homography_out_dir = homography_out_dir + "transformation_matrix/"
            else:
                os.mkdir(homography_out_dir + "transformation_matrix")
                self.homography_out_dir = homography_out_dir + "transformation_matrix/"
            self.reg_log.setText(self.reg_log.text() + "output directory specified correctly!\n")
            self.reg_out_text.setText(self.homography_out_dir)
            self.reg_exec_but.setDisabled(False)
        except:
            self.message("you should select output directory to save transformation!")

    def reg_exec_but_func(self):
        executor = concurrent.futures.ThreadPoolExecutor(max_workers=10)
        future = executor.submit(process_homographies, self.R, self.G, self.B, self.homography_out_dir)
        future.add_done_callback(self.ex_listener)
        self.reg_log.setText(self.reg_log.text() + "finding the transformation matrix!\n")
        self.reg_log.setText(self.reg_log.text() + "this will take some time!\n")
        self.loader.startAnimation()
        self.main_window.setDisabled(True)
    #calib code..................................................................................................
    def openFileDialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_path, _ = QFileDialog.getOpenFileName(self.reg_in_but, "QFileDialog.getOpenFileName()", "",
                                                                "All Files (*);;Python Files (*.py)", options=options)
        return file_path

    def openPathDialog(self):
        path = str(QFileDialog.getExistingDirectory(self.reg_out_but, "Select Directory"))+"/"
        return path

    def calib_regmax_handler(self):
        self.calib_regmat_path = self.openFileDialog()
        self.loader.startAnimation()
        if self.calib_regmat_path  == "":
            print("empty")
        else:
            try:
                self.calib_log.setText(self.calib_log.toPlainText()+"loading the transformation_matrix\n")
                if self.calib_regmat_path.split(".")[-1] != "txt":
                    raise Exception("not txt file")
                reg_mat_dir = "/".join(self.calib_regmat_path.split("/")[:-1])
                self.calib_BR_H_path = reg_mat_dir+"/BR_h.txt"
                self.calib_GR_H_path = reg_mat_dir + "/GR_h.txt"
                self.calib_BR_h = np.loadtxt(self.calib_BR_H_path)
                self.calib_GR_h = np.loadtxt(self.calib_BR_H_path)
                if self.calib_BR_h.shape[0] != 3 or self.calib_BR_h.shape[1] != 3 or self.calib_GR_h.shape[0] != 3 or self.calib_GR_h.shape[1] != 3:
                    self.calib_log.setText(self.calib_log.toPlainText() + "loading the transformation_matrix\n")
                    raise Exception("error in shape of transformation matrix!")
                self.calib_regmat_text.setText(self.calib_regmat_path)
                self.calib_log.setText(self.calib_log.toPlainText()+ "transformation matrix loaded successfully!\n")
                self.calib_ref_but.setDisabled(False)
            except:
                self.message("transformation matrix not loaded!")
                self.calib_regmat_text.setText("error in reading the transformation matrixes!")
        self.loader.stopAnimation()

    def calib_ref_handler(self):
        self.calib_color_names = ["1","2","3","4","5","6","7","8","9","10","bg"]
        calib_real_color_path= self.openPathDialog()
        self.loader.startAnimation()
        if calib_real_color_path  == "/":
            print("empty")
        else:
            try:
                for c in self.calib_color_names:
                    if not(os.path.exists(calib_real_color_path+"/"+c+".tif")):
                        self.calib_log.setText(self.calib_log.toPlainText() + "the "+c+".tif image not exist in selected directory!\n")
                        raise Exception("error")
                self.calib_real_color_path = calib_real_color_path
                self.calib_ref_text.setText(self.calib_real_color_path)
                self.calib_log.setText(self.calib_log.toPlainText() + "reference image directory loaded successfully!\n")
                self.calib_wsi_but.setDisabled(False)
            except:
                self.message("ref image path not loaded!")
                self.calib_regmat_text.setText("error in reading the refrence images!")
        self.loader.stopAnimation()

    def calib_wsi_handler(self):
        calib_wsi_path = self.openPathDialog()
        self.loader.startAnimation()
        if calib_wsi_path  == "/":
            print("empty")
        else:
            try:
                for c in self.calib_color_names:
                    if not(os.path.exists(calib_wsi_path+"/"+c)):
                        self.calib_log.setText(self.calib_log.toPlainText() + "the "+c+".tif image not exist in selected directory!\n")
                        raise Exception("error")
                    if not(len(os.listdir(calib_wsi_path+"/"+c+"/")) >0):
                        self.calib_log.setText(self.calib_log.toPlainText() + "the "+c+" directory is empty!\n")
                        raise Exception("error")
                self.calib_wsi_path = calib_wsi_path
                self.calib_wsi_text.setText(self.calib_wsi_path)
                self.calib_log.setText(self.calib_log.toPlainText() + "wsi images directory loaded successfully!\n")
                self.calib_back_but.setDisabled(False)
            except:
                self.message("wsi images path not loaded!")
                self.calib_regmat_text.setText("error in reading the wsi images!")
        self.loader.stopAnimation()

    def calib_back_handler(self):

        calib_back = self.openFileDialog()
        self.loader.startAnimation()
        if calib_back  == "":
            print("empty")
        else:
            try:
                if not(calib_back.split(".")[-1] == "tif"):
                    self.calib_log.setText(self.calib_log.toPlainText() + "the selected background file is not tif file!\n")
                    raise Exception("error")
                if not(calib_back.split("/")[-1].startswith("BG")):
                    self.calib_log.setText(self.calib_log.toPlainText() + "the selected background file name should start with BG_!\n")
                    raise Exception("error")
                self.calib_back_path = "/".join(calib_back.split("/")[:-1])+"/BG_cR.tif"
                self.calib_back_text.setText(self.calib_back_path)
                self.calib_log.setText(self.calib_log.toPlainText() + "background image directory loaded successfully!\n")
                self.calib_out_but.setDisabled(False)
            except:
                self.message("background image path not loaded!")
                self.calib_regmat_text.setText("error in reading the bakground images!")
        self.loader.stopAnimation()

    def calib_out_handler(self):
        calib_out = self.openPathDialog()
        self.loader.startAnimation()
        if calib_out == "/":
            print("empty")
        else:
            try:
                self.calib_card_directory = calib_out
                self.calib_out_text.setText(self.calib_card_directory)
                self.calib_log.setText(self.calib_log.toPlainText() + "out directory added successfully!\n")
                self.calib_threadnum.setDisabled(False)
                self.calib_exec_but.setDisabled(False)
            except:
                self.message("output path not loaded!")
                self.calib_regmat_text.setText("error in loading output directory!")
        self.loader.stopAnimation()

    def calib_exec_handler(self):
        self.calib_disabel()
        self.loader.startAnimation()
        thread_number = self.calib_threadnum.toPlainText()
        if thread_number == "":
            self.calib_log.setText(self.calib_log.toPlainText() + "thread number field is empty!\n")
            self.message("thread number field is empty!")
            self.loader.stopAnimation()
            self.calib_enable()
        else:
            try:
                thread_num = int(thread_number)
                if thread_num <= 0:
                    self.calib_log.setText(
                        self.calib_log.toPlainText() + "thread number is not positive number or is zero!\n")
                    self.message("thread number should be bigger than 1!")
                    self.loader.stopAnimation()
                    self.calib_enable()
                else:
                    self.calib_thread = thread_num
                    self.calib_processing()
            except:
                self.calib_log.setText(self.calib_log.toPlainText() + "thread number is not integer number!\n")
                self.message("please enter the integer for thread number field!")
                self.loader.stopAnimation()
                self.calib_enable()


    def calib_progress_handler(self,text):
        self.calib_log.setText(self.calib_log.toPlainText() + text)
        self.calib_log.verticalScrollBar().setValue(self.calib_log.verticalScrollBar().maximum())
    def calib_disabel(self):
        self.calib_regmat_but.setDisabled(True)
        self.calib_ref_but.setDisabled(True)
        self.calib_wsi_but.setDisabled(True)
        self.calib_back_but.setDisabled(True)
        self.calib_out_but.setDisabled(True)
        self.calib_threadnum.setDisabled(True)
        self.calib_exec_but.setDisabled(True)

    def calib_enable(self):
        self.calib_regmat_but.setDisabled(False)
        self.calib_ref_but.setDisabled(False)
        self.calib_wsi_but.setDisabled(False)
        self.calib_back_but.setDisabled(False)
        self.calib_out_but.setDisabled(False)
        self.calib_threadnum.setDisabled(False)
        self.calib_exec_but.setDisabled(False)

    def calib_processing(self):
        self.thread_calib = QtCore.QThread()
        self.worker_calib = calibrator_worker(self.calib_BR_H_path, self.calib_GR_H_path, self.calib_real_color_path,
                  self.calib_wsi_path, self.calib_back_path, self.calib_card_directory,
                  self.calib_thread, ["bg"]+[str(x) for x in range(1,11)], self.calib_log,
                  self.calib_real_img, self.calib_before_img, self.calib_after_img)
        self.worker_calib.moveToThread(self.thread_calib)
        self.thread_calib.started.connect(self.worker_calib.run)
        self.worker_calib.finished.connect(self.thread_calib.quit)
        self.worker_calib.finished.connect(self.worker_calib.deleteLater)
        self.thread_calib.finished.connect(self.thread_calib.deleteLater)
        self.worker_calib.finished2.connect(self.calib_ex_listener)
        self.worker_calib.progress.connect(self.calib_progress_handler)
        self.thread_calib.start()

    def calib_ex_listener(self):
        self.calib_enable()
        self.loader.stopAnimation()
        self.thread_calib.quit()

    #stich code...........................................................
    def stich_lines_handler(self):
        stich_lines_path= self.openPathDialog()
        self.loader.startAnimation()
        if stich_lines_path  == "/":
            print("empty")
        else:
            try:
                self.stich_number_of_lines = len(glob.glob(stich_lines_path+"*.tif"))//3
                for i in range(self.stich_number_of_lines):
                    for j in range(1,4):
                        if not(os.path.exists(stich_lines_path + "line_"+str(i)+"_c"+str(j)+".tif")):
                            self.stich_log.setText(self.stich_log.toPlainText() + "line_"+str(i)+"_c"+str(j)+".tif not exsist in selected directory!\n")
                            raise Exception("error")

                self.stich_lines_path = stich_lines_path
                self.stich_raw_text.setText(self.stich_lines_path)
                self.stich_log.setText(self.stich_log.toPlainText() + "raw images directory loaded successfully!\n")
                self.stich_regmat_but.setDisabled(False)
            except:
                self.message("raw images path not loaded!")
                self.stich_raw_text.setText("error in reading the refrence images!")
        self.loader.stopAnimation()

    def stich_regmat_handler(self):
        self.stich_regmat_path = self.openFileDialog()
        self.loader.startAnimation()
        if self.stich_regmat_path  == "":
            print("empty")
        else:
            try:
                self.stich_log.setText(self.stich_log.toPlainText()+"loading the transformation_matrix\n")
                if self.stich_regmat_path.split(".")[-1] != "txt":
                    raise Exception("not txt file")
                reg_mat_dir = "/".join(self.stich_regmat_path.split("/")[:-1])
                self.stich_BR_H_path = reg_mat_dir+"/BR_h.txt"
                self.stich_GR_H_path = reg_mat_dir + "/GR_h.txt"
                self.stich_BR_h = np.loadtxt(self.stich_BR_H_path)
                self.stich_GR_h = np.loadtxt(self.stich_BR_H_path)
                if self.stich_BR_h.shape[0] != 3 or self.stich_BR_h.shape[1] != 3 or self.stich_GR_h.shape[0] != 3 or self.stich_GR_h.shape[1] != 3:
                    self.stich_log.setText(self.stich_log.toPlainText() + "loading the transformation_matrix\n")
                    raise Exception("error in shape of transformation matrix!")
                self.stich_regmat_text.setText(self.stich_regmat_path)
                self.stich_log.setText(self.stich_log.toPlainText()+ "transformation matrix loaded successfully!\n")
                self.stich_back_but.setDisabled(False)
            except:
                self.message("transformation matrix not loaded!")
                self.stich_regmat_text.setText("error in reading the transformation matrices!")
        self.loader.stopAnimation()

    def stich_back_handler(self):
        stich_back = self.openFileDialog()
        self.loader.startAnimation()
        if stich_back == "":
            print("empty")
        else:
            try:
                if not (stich_back.split(".")[-1] == "tif"):
                    self.stich_log.setText(self.stich_log.toPlainText() + "the selected background file is not tif file!\n")
                    raise Exception("error")
                if not (stich_back.split("/")[-1].startswith("BG")):
                    self.stich_log.setText(self.stich_log.toPlainText() + "the selected background file name should start with BG_!\n")
                    raise Exception("error")
                self.stich_back_path = "/".join(stich_back.split("/")[:-1]) + "/BG_cR.tif"
                self.stich_back_text.setText(self.stich_back_path)
                self.stich_log.setText(self.stich_log.toPlainText() + "background image directory loaded successfully!\n")

                self.stich_calibbox.setDisabled(False)
                self.stich_out_but.setDisabled(False)
                self.stich_whiten_box.setDisabled(False)
                self.stich_threadnum.setDisabled(False)

            except:
                self.message("background image path not loaded!")
                self.stich_regmat_text.setText("error in reading the bakground images!")
        self.loader.stopAnimation()

    def stich_calibbox_handler(self):
        if self.stich_calibbox.isChecked():
            self.stich_calibmat_but.setDisabled(False)
            self.stich_calibmat_text.setDisabled(False)
            self.stich_need_calib = True
        else:
            self.stich_need_calib = False
            self.stich_calibmat_but.setDisabled(True)
            self.stich_calibmat_text.setDisabled(True)

    def stich_whiten_box_handler(self):
        if self.stich_whiten_box.isChecked():
            self.stich_need_whiten = True
        else:
            self.stich_need_whiten = False

    def stich_calibmat_handler(self):
        self.stich_color_calib_path = self.openFileDialog()
        self.loader.startAnimation()
        if self.stich_color_calib_path == "":
            print("empty")
        else:
            try:
                self.stich_log.setText(self.stich_log.toPlainText() + "loading the color transformation_matrix\n")
                if self.stich_color_calib_path.split(".")[-1] != "txt":
                    raise Exception("not txt file")

                self.stich_color_calib = np.loadtxt(self.stich_color_calib_path)
                if self.stich_color_calib.shape[0] != 4 or self.stich_color_calib.shape[1] != 3 :
                    self.stich_log.setText(self.stich_log.toPlainText() + "shape of color calibration matrix should be 4*3 !\n")
                    raise Exception("error in shape of transformation matrix!")
                self.stich_calibmat_text.setText(self.stich_color_calib_path)
                self.stich_log.setText(self.stich_log.toPlainText() + "color transformation matrix loaded successfully!\n")
                self.stich_back_but.setDisabled(False)
            except:
                self.message("color transformation matrix not loaded!")
                self.stich_calibmat_text_text.setText("error in reading the color transformation matrices!")
        self.loader.stopAnimation()

    def stich_out_handler(self):
        stich_out = self.openPathDialog()
        self.loader.startAnimation()
        if stich_out == "/":
            print("empty")
        else:
            try:
                self.stich_out_directory = stich_out
                self.stich_out_text.setText(self.stich_out_directory)
                self.stich_log.setText(self.stich_log.toPlainText() + "out directory added successfully!\n")
                self.stich_exec_but.setDisabled(False)
            except:
                self.message("output path not loaded!")
                self.stich_out_text.setText("error in reading the output directory!")
        self.loader.stopAnimation()
    def stich_disabel(self):
        self.stich_raw_but.setDisabled(True)
        self.stich_raw_text.setDisabled(True)
        self.stich_regmat_but.setDisabled(True)
        self.stich_regmat_text.setDisabled(True)
        self.stich_back_but.setDisabled(True)
        self.stich_back_text.setDisabled(True)
        self.label_4.setDisabled(True)
        self.stich_calibbox.setDisabled(True)
        self.label_21.setDisabled(True)
        self.stich_whiten_box.setDisabled(True)
        self.label_5.setDisabled(True)
        self.stich_threadnum.setDisabled(True)
        self.stich_calibmat_but.setDisabled(True)
        self.stich_calibmat_text.setDisabled(True)
        self.stich_out_but.setDisabled(True)
        self.stich_out_text.setDisabled(True)
        self.stich_exec_but.setDisabled(True)

    def stich_enable(self):
        self.stich_raw_but.setDisabled(False)
        self.stich_raw_text.setDisabled(False)
        self.stich_regmat_but.setDisabled(False)
        self.stich_regmat_text.setDisabled(False)
        self.stich_back_but.setDisabled(False)
        self.stich_back_text.setDisabled(False)
        self.label_4.setDisabled(False)
        self.stich_calibbox.setDisabled(False)
        self.label_21.setDisabled(False)
        self.stich_whiten_box.setDisabled(False)
        self.label_5.setDisabled(False)
        self.stich_threadnum.setDisabled(False)
        if self.stich_calibbox.isChecked():
            self.stich_calibmat_but.setDisabled(False)
            self.stich_calibmat_text.setDisabled(False)
        self.stich_out_but.setDisabled(False)
        self.stich_out_text.setDisabled(False)
        self.stich_exec_but.setDisabled(False)
    def stich_exec_handler(self):
        self.stich_disabel()
        self.loader.startAnimation()
        thread_number = self.stich_threadnum.toPlainText()
        if thread_number == "":
            self.stich_log.setText(self.stich_log.toPlainText() + "thread number field is empty!\n")
            self.message("thread number field is empty!")
            self.loader.stopAnimation()
            self.main_window.setDisabled(False)
        else:
            try:
                thread_num = int(thread_number)
                if thread_num <= 0:
                    self.stich_log.setText(self.stich_log.toPlainText() + "thread number is not positive number or is zero!\n")
                    self.message("thread number should be bigger than 1!")
                    self.loader.stopAnimation()
                    self.main_window.setDisabled(False)
                else:
                    self.stich_thread = thread_num
                    if self.stich_need_calib and self.stich_need_whiten:
                        if self.check_color_calib():
                            self.stich_processing(True,self.stich_color_calib,True)
                    elif not(self.stich_need_calib) and self.stich_need_whiten:
                        print("01")
                        self.stich_processing(False, None, True)
                    elif self.stich_need_calib and not(self.stich_need_whiten):
                        print("10")
                        if self.check_color_calib():
                            self.stich_processing(True, self.stich_color_calib, False)
                    elif not(self.stich_need_calib) and not(self.stich_need_whiten):
                        print("00")
                        self.stich_processing(False, None, False)
            except:
                self.stich_log.setText(self.stich_log.toPlainText() + "thread number is not integer number!\n")
                self.message("please enter the integer for thread number field!")
                self.loader.stopAnimation()
                self.main_window.setDisabled(False)

    def check_color_calib(self):

        if self.stich_color_calib_path == None:
            self.message("please specify the color calibration matrix path!")
            self.stich_log.setText(self.stich_log.toPlainText() + "color calibration matrix is not loaded!\n")
            return False
        else:
            return True
    def stich_processing(self, color_calib_exist, color_calib_matrix, whiten_back):
        self.thread_stich = QtCore.QThread()
        self.worker_stich = stich_worker(self.stich_BR_H_path, self.stich_GR_H_path,
                                        self.stich_lines_path, self.stich_back_path,
                                        self.stich_out_directory, self.stich_thread, self.stich_log, self.stich_img, whiten_back, color_calib_exist, color_calib_matrix)
        self.worker_stich.moveToThread(self.thread_stich)
        self.thread_stich.started.connect(self.worker_stich.run)
        self.worker_stich.finished.connect(self.thread_stich.quit)
        self.worker_stich.finished.connect(self.worker_stich.deleteLater)
        self.thread_stich.finished.connect(self.thread_stich.deleteLater)
        self.worker_stich.finished2.connect(self.stich_ex_listener)
        self.worker_stich.progress.connect(self.stich_progress_handler)
        self.thread_stich.start()

    def stich_ex_listener(self):
        self.stich_enable()
        self.loader.stopAnimation()
        print("here")
        self.thread_stich.quit()
        print("here2")
    def stich_progress_handler(self,text):
        self.stich_log.setText(self.stich_log.toPlainText() + text)
        self.stich_log.verticalScrollBar().setValue(self.stich_log.verticalScrollBar().maximum())

    #tile maker code............................................................
    def tile_source_handler(self):
        self.tile_source_path = self.openFileDialog()
        self.loader.startAnimation()
        if self.tile_source_path == "":
            print("empty")
        else:
            try:
                self.tile_log.setText(self.tile_log.toPlainText() + "loading the source Image!\n")
                if self.tile_source_path.split(".")[-1] != "tif":
                    raise Exception("not txt file")
                self.tile_source_text.setText(self.tile_source_path)
                self.tile_log.setText(self.tile_log.toPlainText() + "source Image loaded successfully!\n")
                self.tile_out_but.setDisabled(False)
            except:
                self.message("source Image not loaded!")
                self.tile_out_text.setText("error in reading the source Image!")
        self.loader.stopAnimation()

    def tile_out_handler(self):
        tile_out = self.openPathDialog()
        self.loader.startAnimation()
        if tile_out == "/":
            print("empty")
        else:
            try:
                self.tile_out_directory = tile_out
                self.tile_out_text.setText(self.tile_out_directory)
                self.tile_log.setText(self.tile_log.toPlainText() + "out directory added successfully!\n")
                self.tile_exec_but.setDisabled(False)
            except:
                self.message("output path not loaded!")
                self.stich_out_text.setText("error in reading the output directory!")
        self.loader.stopAnimation()

    def tile_disable(self):
        self.tile_source_but.setDisabled(True)
        self.tile_source_text.setDisabled(True)
        self.tile_out_but.setDisabled(True)
        self.tile_out_text.setDisabled(True)
        self.tile_exec_but.setDisabled(True)

    def tile_enable(self):
        self.tile_source_but.setDisabled(False)
        self.tile_source_text.setDisabled(False)
        self.tile_out_but.setDisabled(False)
        self.tile_out_text.setDisabled(False)
        self.tile_exec_but.setDisabled(False)

    def tile_exec_handler(self):
        self.tile_disable()
        self.loader.startAnimation()
        if not(os.path.exists(self.tile_out_directory+"tile_files/")):
            os.mkdir(self.tile_out_directory+"tile_files/")
        self.tile_name = (self.tile_source_path.split("/")[-1]).split(".")[0]
        if not (os.path.exists(self.tile_out_directory+"tile_files/"+self.tile_name+"/")):
            os.mkdir(self.tile_out_directory+"tile_files/"+self.tile_name+"/")
        try:
            self.tile_save_dir = self.tile_out_directory+"tile_files/"+self.tile_name+"/"+self.tile_name+".dzi"
            self.thread_tile = QtCore.QThread()
            self.worker_tile = tile_worker(self.tile_source_path, self.tile_save_dir)
            self.worker_tile.moveToThread(self.thread_tile)
            self.thread_tile.started.connect(self.worker_tile.run)
            self.worker_tile.finished.connect(self.thread_tile.quit)
            self.worker_tile.finished.connect(self.worker_tile.deleteLater)
            self.thread_tile.finished.connect(self.thread_tile.deleteLater)
            self.worker_tile.finished2.connect(self.tile_ex_listener)
            self.worker_tile.progress.connect(self.tile_progress_handler)
            self.thread_tile.start()
        except:
            self.message("source image is truncated or its not image!")
            self.tile_log.setText(self.tile_log.toPlainText() + "error in reading source Image!\n")
            self.tile_enable()
            self.loader.stopAnimation()
            self.thread_tile.quit()

    def tile_ex_listener(self):
        self.tile_enable()
        self.loader.stopAnimation()
        self.thread_tile.quit()

    def tile_progress_handler(self, text):
        self.tile_log.setText(self.tile_log.toPlainText() + text)
        self.tile_log.verticalScrollBar().setValue(self.tile_log.verticalScrollBar().maximum())


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
